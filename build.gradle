plugins {
  id 'org.springframework.boot' version '2.2.6.RELEASE'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id 'com.palantir.git-version' version '0.12.3'
  id 'org.hidetake.ssh' version '2.10.1'
  id 'java'
  id 'eclipse'
  id 'idea'
}

version gitVersion()

group = 'com.anothernode'
sourceCompatibility = '1.8'

configurations {
  developmentOnly
  runtimeClasspath {
      extendsFrom developmentOnly
  }
  compileOnly {
      extendsFrom annotationProcessor
  }
}

sourceSets {
  main {
    java {
      srcDirs 'src/main/java'
      srcDirs 'build/generated/sources/annotationProcessor/java/main'
    }
  }
}

repositories {
  mavenCentral()
}

def autoValueVersion = '1.7'
def assertJVersion = '3.15.0'
def jsoupVersion = '1.13.1'

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"
  testImplementation "org.assertj:assertj-core:${assertJVersion}"
  testImplementation "org.jsoup:jsoup:${jsoupVersion}"
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  // Workaround for running tests in VS Code. Can be removed when upstream is fixed.
  // See https://github.com/microsoft/vscode-java-test/issues/971
  // and https://github.com/eclipse/buildship/issues/980
  testImplementation('org.junit.platform:junit-platform-engine:+')
}

test {
  useJUnitPlatform()
}

// Deployment

def userHome = System.properties['user.home']

remotes {
  gibbs {
    host = 'gibbs.anothernode.com'
    user = 'anode'
    identity = file("${userHome}/.ssh/id_rsa-gibbs")
  }
}

tasks.register("deploy") {
  dependsOn build
  group = "Deployment"
  description = "Deploys to server"

  doLast {
    def hostDir = "game-of-life"
    def hostService = "game-of-life"

    def buildPath = "${projectDir}/build/libs/"
    def jar = "game-of-life-${version}.jar"
    def jarPath = buildPath + jar

    ssh.run {
      session(remotes.gibbs) {
        put from: jarPath, into: hostDir
        execute "supervisorctl stop ${hostService}"
        execute "ln -sf ${jar} ${hostDir}/current.jar"
        execute "supervisorctl start ${hostService}"
      }
    }
  }
}
